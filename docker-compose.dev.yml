services:
  postgres:
    image: postgres:18
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: GvcLkrWP9x8ey2xI9F
      PGDATA: /var/lib/postgresql/18/docker
    volumes:
      - postgres_data:/var/lib/postgresql
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server --console-address ":9001" /data/
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: lABEgpTa8piMO4wSM91B
      MINIO_BROWSER_REDIRECT_URL: http://localhost/minio/
    ports:
      - "9000:9000"
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  kafka:
    image: apache/kafka:4.1.0
    container_name: kafka
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      # Required for a single node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

      KAFKA_LOG_DIRS: /var/lib/kafka/data
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: dev
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
      SERVER.PORT: 8070
      SERVER_SERVLET_CONTEXT_PATH: /kafka
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: nc -z localhost 8070 || exit -1
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  nginx:
    image: nginx:1.29
    tty: true
    container_name: nginx
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: service nginx status || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      minio:
        condition: service_healthy
      kafka-ui:
        condition: service_healthy
    networks:
      - backend

  file-service:
    image: file-service:latest
    container_name: file-service
    build:
      context: ../file-service
      dockerfile: Dockerfile
    environment:
      ENV: dev
      MINIO_USER: root
      MINIO_PASSWORD: lABEgpTa8piMO4wSM91B
      POSTGRES_PASSWORD: GvcLkrWP9x8ey2xI9F
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - backend

  analyzer-service:
    image: analyzer-service:latest
    container_name: analyzer-service
    build:
      context: ../analyzer-service
      dockerfile: Dockerfile
    networks:
      - backend

  task-service:
    image: task-service:latest
    container_name: task-service
    build:
      context: ../task-service
      dockerfile: Dockerfile
    environment:
      ENV: dev
      POSTGRES_PASSWORD: GvcLkrWP9x8ey2xI9F
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - backend

  inspection-service:
    image: inspection-service:latest
    container_name: inspection-service
    build:
      context: ../inspection-service
      dockerfile: Dockerfile
    environment:
      ENV: dev
      POSTGRES_PASSWORD: GvcLkrWP9x8ey2xI9F
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  kafka_data:
